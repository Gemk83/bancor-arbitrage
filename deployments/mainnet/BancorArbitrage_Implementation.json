{
  "address": "0x6dbE10BFC331CB8b7b1c17ce252a6f178D74E912",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "initBnt",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "initDustWallet",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "contract IBancorNetworkV2",
              "name": "bancorNetworkV2",
              "type": "address"
            },
            {
              "internalType": "contract IBancorNetwork",
              "name": "bancorNetworkV3",
              "type": "address"
            },
            {
              "internalType": "contract IUniswapV2Router02",
              "name": "uniV2Router",
              "type": "address"
            },
            {
              "internalType": "contract ISwapRouter",
              "name": "uniV3Router",
              "type": "address"
            },
            {
              "internalType": "contract IUniswapV2Router02",
              "name": "sushiswapRouter",
              "type": "address"
            },
            {
              "internalType": "contract ICarbonController",
              "name": "carbonController",
              "type": "address"
            }
          ],
          "internalType": "struct BancorArbitrage.Exchanges",
          "name": "exchanges",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessDenied",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientBurn",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidETHAmountSent",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidExchangeId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFlashLoanCaller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialAndFinalTokens",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidRouteLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSourceToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MinTargetAmountTooHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Overflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroValue",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16[]",
          "name": "exchangeIds",
          "type": "uint16[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokenPath",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sourceAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "burnAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        }
      ],
      "name": "ArbitrageExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAmount",
          "type": "uint256"
        }
      ],
      "name": "MinBurnUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "prevPercentagePPM",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "newPercentagePPM",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevMaxAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxAmount",
          "type": "uint256"
        }
      ],
      "name": "RewardsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EXCHANGE_ID_BANCOR_V2",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EXCHANGE_ID_BANCOR_V3",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EXCHANGE_ID_CARBON",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EXCHANGE_ID_SUSHISWAP",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EXCHANGE_ID_UNISWAP_V2",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EXCHANGE_ID_UNISWAP_V3",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "exchangeId",
              "type": "uint16"
            },
            {
              "internalType": "contract Token",
              "name": "targetToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "minTargetAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "customAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "customInt",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "customData",
              "type": "bytes"
            }
          ],
          "internalType": "struct BancorArbitrage.Route[]",
          "name": "routes",
          "type": "tuple[]"
        },
        {
          "internalType": "contract Token",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "sourceAmount",
          "type": "uint256"
        }
      ],
      "name": "flashloanAndArb",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "exchangeId",
              "type": "uint16"
            },
            {
              "internalType": "contract Token",
              "name": "targetToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "minTargetAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "customAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "customInt",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "customData",
              "type": "bytes"
            }
          ],
          "internalType": "struct BancorArbitrage.Route[]",
          "name": "routes",
          "type": "tuple[]"
        },
        {
          "internalType": "contract Token",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "sourceAmount",
          "type": "uint256"
        }
      ],
      "name": "fundAndArb",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minBurn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "erc20Token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onFlashLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "postUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewards",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "percentagePPM",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "maxAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct BancorArbitrage.Rewards",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMinBurn",
          "type": "uint256"
        }
      ],
      "name": "setMinBurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "percentagePPM",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "maxAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct BancorArbitrage.Rewards",
          "name": "newRewards",
          "type": "tuple"
        }
      ],
      "name": "setRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x7816e01b80a4cf020bb1ddf6a0ea3ae2ef67b1719b8d0c1460cb250c05563b48",
  "receipt": {
    "to": null,
    "from": "0x5bEBA4D3533a963Dedb270a95ae5f7752fA0Fe22",
    "contractAddress": "0x6dbE10BFC331CB8b7b1c17ce252a6f178D74E912",
    "transactionIndex": 112,
    "gasUsed": "3474497",
    "logsBloom": "0x
    "blockHash": "0xf13472b15548c4c616caf0f8451e7765cc0421da23cd7c793f3ab07116118956",
    "transactionHash": "0x7816e01b80a4cf020bb1ddf6a0ea3ae2ef67b1719b8d0c1460cb250c05563b48",
    "logs": [],
    "blockNumber": 17087782,
    "cumulativeGasUsed": "10660704",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C",
    "0xeBcC959479634EEC5A4d7162e36f8B8cc763f491",
    {
      "bancorNetworkV2": "0x2F9EC37d6CcFFf1caB21733BdaDEdE11c823cCB0",
      "bancorNetworkV3": "0xeEF417e1D5CC832e619ae18D2F140De2999dD4fB",
      "uniV2Router": "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",
      "uniV3Router": "0xE592427A0AEce92De3Edee1F18E0157C05861564",
      "sushiswapRouter": "0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F",
      "carbonController": "0xC537e898CD774e2dCBa3B14Ea6f34C93d5eA45e1"
    }
  ],
  "numDeployments": 3,
  "solcInputHash": "45de3d5199437d40d6bb5b8393a69e23",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"initBnt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initDustWallet\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IBancorNetworkV2\",\"name\":\"bancorNetworkV2\",\"type\":\"address\"},{\"internalType\":\"contract IBancorNetwork\",\"name\":\"bancorNetworkV3\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"uniV2Router\",\"type\":\"address\"},{\"internalType\":\"contract ISwapRouter\",\"name\":\"uniV3Router\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"sushiswapRouter\",\"type\":\"address\"},{\"internalType\":\"contract ICarbonController\",\"name\":\"carbonController\",\"type\":\"address\"}],\"internalType\":\"struct BancorArbitrage.Exchanges\",\"name\":\"exchanges\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessDenied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBurn\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidETHAmountSent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidExchangeId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFlashLoanCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialAndFinalTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRouteLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSourceToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinTargetAmountTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Overflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroValue\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16[]\",\"name\":\"exchangeIds\",\"type\":\"uint16[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokenPath\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"ArbitrageExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"MinBurnUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"prevPercentagePPM\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newPercentagePPM\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevMaxAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxAmount\",\"type\":\"uint256\"}],\"name\":\"RewardsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXCHANGE_ID_BANCOR_V2\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXCHANGE_ID_BANCOR_V3\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXCHANGE_ID_CARBON\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXCHANGE_ID_SUSHISWAP\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXCHANGE_ID_UNISWAP_V2\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXCHANGE_ID_UNISWAP_V3\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"exchangeId\",\"type\":\"uint16\"},{\"internalType\":\"contract Token\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minTargetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"customAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"customInt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"customData\",\"type\":\"bytes\"}],\"internalType\":\"struct BancorArbitrage.Route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"},{\"internalType\":\"contract Token\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sourceAmount\",\"type\":\"uint256\"}],\"name\":\"flashloanAndArb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"exchangeId\",\"type\":\"uint16\"},{\"internalType\":\"contract Token\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minTargetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"customAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"customInt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"customData\",\"type\":\"bytes\"}],\"internalType\":\"struct BancorArbitrage.Route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"},{\"internalType\":\"contract Token\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sourceAmount\",\"type\":\"uint256\"}],\"name\":\"fundAndArb\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"erc20Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onFlashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"postUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewards\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"percentagePPM\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct BancorArbitrage.Rewards\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinBurn\",\"type\":\"uint256\"}],\"name\":\"setMinBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"percentagePPM\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct BancorArbitrage.Rewards\",\"name\":\"newRewards\",\"type\":\"tuple\"}],\"name\":\"setRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"BancorArbitrage contract\",\"events\":{\"ArbitrageExecuted(address,uint16[],address[],uint256,uint256,uint256)\":{\"details\":\"triggered after a successful arb is executed\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"MinBurnUpdated(uint256,uint256)\":{\"details\":\"triggered when the min bnt burn amount is updated\"},\"RewardsUpdated(uint32,uint32,uint256,uint256)\":{\"details\":\"triggered when the rewards settings are updated\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"a \\\"virtual\\\" constructor that is only used to set immutable state variables\"},\"flashloanAndArb((uint16,address,uint256,uint256,address,uint256,bytes)[],address,uint256)\":{\"details\":\"execute multi-step arbitrage trade between exchanges using a flashloan from Bancor Network V3\"},\"fundAndArb((uint16,address,uint256,uint256,address,uint256,bytes)[],address,uint256)\":{\"details\":\"execute multi-step arbitrage trade between exchanges using user fundsmust approve token before executing the function\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize()\":{\"details\":\"fully initializes the contract and its parents\"},\"minBurn()\":{\"details\":\"returns the min bnt burn amount\"},\"onFlashLoan(address,address,uint256,uint256,bytes)\":{\"details\":\"callback function for bancor V3 flashloanperforms the arbitrage trades\"},\"postUpgrade(bytes)\":{\"details\":\"performs post-upgrade initialization requirements: - this must can be called only once per-upgrade\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"rewards()\":{\"details\":\"returns the rewards settings\"},\"roleAdmin()\":{\"details\":\"returns the admin role\"},\"setMinBurn(uint256)\":{\"details\":\"set min bnt burn amount requirements: - the caller must be the admin of the contract\"},\"setRewards((uint32,uint256))\":{\"details\":\"sets the rewards settings requirements: - the caller must be the admin of the contract\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/arbitrage/BancorArbitrage.sol\":\"BancorArbitrage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc2dfd6ba9449f61b6b03b262182faf302f093a8c05dd10792aeecb4ed1663c0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x4807db844a856813048b5af81a764fdd25a0ae8876a3132593e8d21ddc6b607c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"@uniswap/v2-periphery/contracts/interfaces/IWETH.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\\n\",\"keccak256\":\"0xfc10758fd8dba790c39468dccd358cb7cef06ae7c4781832cc7aa76f91f167e6\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"contracts/arbitrage/BancorArbitrage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport { ReentrancyGuardUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport { IUniswapV2Router02 } from \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport { ISwapRouter } from \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport { IWETH } from \\\"@uniswap/v2-periphery/contracts/interfaces/IWETH.sol\\\";\\n\\nimport { Token } from \\\"../token/Token.sol\\\";\\nimport { TokenLibrary } from \\\"../token/TokenLibrary.sol\\\";\\nimport { IVersioned } from \\\"../utility/interfaces/IVersioned.sol\\\";\\nimport { Upgradeable } from \\\"../utility/Upgradeable.sol\\\";\\nimport { Utils } from \\\"../utility/Utils.sol\\\";\\nimport { IBancorNetwork, IFlashLoanRecipient } from \\\"../exchanges/interfaces/IBancorNetwork.sol\\\";\\nimport { IBancorNetworkV2 } from \\\"../exchanges/interfaces/IBancorNetworkV2.sol\\\";\\nimport { ICarbonController, TradeAction } from \\\"../exchanges/interfaces/ICarbonController.sol\\\";\\nimport { PPM_RESOLUTION } from \\\"../utility/Constants.sol\\\";\\nimport { MathEx } from \\\"../utility/MathEx.sol\\\";\\n\\n/**\\n * @dev BancorArbitrage contract\\n */\\ncontract BancorArbitrage is ReentrancyGuardUpgradeable, Utils, Upgradeable {\\n    using SafeERC20 for IERC20;\\n    using TokenLibrary for Token;\\n    using Address for address payable;\\n\\n    error InvalidExchangeId();\\n    error InvalidRouteLength();\\n    error InvalidInitialAndFinalTokens();\\n    error InvalidFlashLoanCaller();\\n    error MinTargetAmountTooHigh();\\n    error InvalidSourceToken();\\n    error InvalidETHAmountSent();\\n    error InsufficientBurn();\\n\\n    // trade args\\n    struct Route {\\n        uint16 exchangeId;\\n        Token targetToken;\\n        uint256 minTargetAmount;\\n        uint256 deadline;\\n        address customAddress;\\n        uint256 customInt;\\n        bytes customData;\\n    }\\n\\n    // rewards settings\\n    struct Rewards {\\n        uint32 percentagePPM;\\n        uint256 maxAmount;\\n    }\\n\\n    // exchanges\\n    struct Exchanges {\\n        IBancorNetworkV2 bancorNetworkV2;\\n        IBancorNetwork bancorNetworkV3;\\n        IUniswapV2Router02 uniV2Router;\\n        ISwapRouter uniV3Router;\\n        IUniswapV2Router02 sushiswapRouter;\\n        ICarbonController carbonController;\\n    }\\n\\n    // exchange ids\\n    uint16 public constant EXCHANGE_ID_BANCOR_V2 = 1;\\n    uint16 public constant EXCHANGE_ID_BANCOR_V3 = 2;\\n    uint16 public constant EXCHANGE_ID_UNISWAP_V2 = 3;\\n    uint16 public constant EXCHANGE_ID_UNISWAP_V3 = 4;\\n    uint16 public constant EXCHANGE_ID_SUSHISWAP = 5;\\n    uint16 public constant EXCHANGE_ID_CARBON = 6;\\n\\n    // maximum number of trade routes supported\\n    uint256 private constant MAX_ROUTE_LENGTH = 10;\\n\\n    // the bnt contract\\n    IERC20 internal immutable _bnt;\\n\\n    // WETH9 contract\\n    IERC20 internal immutable _weth;\\n\\n    // bancor v2 network contract\\n    IBancorNetworkV2 internal immutable _bancorNetworkV2;\\n\\n    // bancor v3 network contract\\n    IBancorNetwork internal immutable _bancorNetworkV3;\\n\\n    // uniswap v2 router contract\\n    IUniswapV2Router02 internal immutable _uniswapV2Router;\\n\\n    // uniswap v3 router contract\\n    ISwapRouter internal immutable _uniswapV3Router;\\n\\n    // sushiSwap router contract\\n    IUniswapV2Router02 internal immutable _sushiSwapRouter;\\n\\n    // Carbon controller contract\\n    ICarbonController internal immutable _carbonController;\\n\\n    // Dust wallet address\\n    address internal immutable _dustWallet;\\n\\n    // rewards defaults\\n    Rewards internal _rewards;\\n\\n    // min BNT burn for an arbitrage\\n    uint256 private _minBurn;\\n\\n    // upgrade forward-compatibility storage gap\\n    uint256[MAX_GAP - 3] private __gap;\\n\\n    /**\\n     * @dev triggered after a successful arb is executed\\n     */\\n    event ArbitrageExecuted(\\n        address indexed caller,\\n        uint16[] exchangeIds,\\n        address[] tokenPath,\\n        uint256 sourceAmount,\\n        uint256 burnAmount,\\n        uint256 rewardAmount\\n    );\\n\\n    /**\\n     * @dev triggered when the rewards settings are updated\\n     */\\n    event RewardsUpdated(\\n        uint32 prevPercentagePPM,\\n        uint32 newPercentagePPM,\\n        uint256 prevMaxAmount,\\n        uint256 newMaxAmount\\n    );\\n\\n    /**\\n     * @dev triggered when the min bnt burn amount is updated\\n     */\\n    event MinBurnUpdated(uint256 prevAmount, uint256 newAmount);\\n\\n    /**\\n     * @dev a \\\"virtual\\\" constructor that is only used to set immutable state variables\\n     */\\n    constructor(\\n        IERC20 initBnt,\\n        address initDustWallet,\\n        Exchanges memory exchanges\\n    )\\n        validAddress(address(initBnt))\\n        validAddress(address(initDustWallet))\\n        validAddress(address(exchanges.bancorNetworkV2))\\n        validAddress(address(exchanges.bancorNetworkV3))\\n        validAddress(address(exchanges.uniV2Router))\\n        validAddress(address(exchanges.uniV3Router))\\n        validAddress(address(exchanges.sushiswapRouter))\\n        validAddress(address(exchanges.carbonController))\\n    {\\n        _bnt = initBnt;\\n        _weth = IERC20(exchanges.uniV2Router.WETH());\\n        _dustWallet = initDustWallet;\\n        _bancorNetworkV2 = exchanges.bancorNetworkV2;\\n        _bancorNetworkV3 = exchanges.bancorNetworkV3;\\n        _uniswapV2Router = exchanges.uniV2Router;\\n        _uniswapV3Router = exchanges.uniV3Router;\\n        _sushiSwapRouter = exchanges.sushiswapRouter;\\n        _carbonController = exchanges.carbonController;\\n    }\\n\\n    /**\\n     * @dev fully initializes the contract and its parents\\n     */\\n    function initialize() external initializer {\\n        __BancorArbitrage_init();\\n    }\\n\\n    // solhint-disable func-name-mixedcase\\n\\n    /**\\n     * @dev initializes the contract and its parents\\n     */\\n    function __BancorArbitrage_init() internal onlyInitializing {\\n        __ReentrancyGuard_init();\\n        __Upgradeable_init();\\n\\n        __BancorArbitrage_init_unchained();\\n    }\\n\\n    /**\\n     * @dev performs contract-specific initialization\\n     */\\n    function __BancorArbitrage_init_unchained() internal onlyInitializing {\\n        _rewards = Rewards({ percentagePPM: 100000, maxAmount: 100 * 1e18 });\\n    }\\n\\n    /**\\n     * @dev authorize the contract to receive the native token\\n     */\\n    receive() external payable {}\\n\\n    /**\\n     * @inheritdoc Upgradeable\\n     */\\n    function version() public pure override(Upgradeable) returns (uint16) {\\n        return 3;\\n    }\\n\\n    /**\\n     * @dev checks whether the specified number of routes is supported\\n     */\\n    modifier validRouteLength(Route[] calldata routes) {\\n        // validate inputs\\n        _validRouteLength(routes);\\n\\n        _;\\n    }\\n\\n    /**\\n     * @dev validRouteLength logic for gas optimization\\n     */\\n    function _validRouteLength(Route[] calldata routes) internal pure {\\n        if (routes.length == 0 || routes.length > MAX_ROUTE_LENGTH) {\\n            revert InvalidRouteLength();\\n        }\\n    }\\n\\n    /**\\n     * @dev sets the rewards settings\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the admin of the contract\\n     */\\n    function setRewards(\\n        Rewards calldata newRewards\\n    ) external onlyAdmin validFee(newRewards.percentagePPM) greaterThanZero(newRewards.maxAmount) {\\n        uint32 prevPercentagePPM = _rewards.percentagePPM;\\n        uint256 prevMaxAmount = _rewards.maxAmount;\\n\\n        // return if the rewards are the same\\n        if (prevPercentagePPM == newRewards.percentagePPM && prevMaxAmount == newRewards.maxAmount) {\\n            return;\\n        }\\n\\n        _rewards = newRewards;\\n\\n        emit RewardsUpdated({\\n            prevPercentagePPM: prevPercentagePPM,\\n            newPercentagePPM: newRewards.percentagePPM,\\n            prevMaxAmount: prevMaxAmount,\\n            newMaxAmount: newRewards.maxAmount\\n        });\\n    }\\n\\n    /**\\n     * @dev set min bnt burn amount\\n     *\\n     * requirements:\\n     *\\n     * - the caller must be the admin of the contract\\n     */\\n    function setMinBurn(uint256 newMinBurn) external onlyAdmin {\\n        uint256 currentMinBurn = _minBurn;\\n        if (currentMinBurn == newMinBurn) {\\n            return;\\n        }\\n        _minBurn = newMinBurn;\\n        emit MinBurnUpdated(currentMinBurn, newMinBurn);\\n    }\\n\\n    /**\\n     * @dev returns the rewards settings\\n     */\\n    function rewards() external view returns (Rewards memory) {\\n        return _rewards;\\n    }\\n\\n    /**\\n     * @dev returns the min bnt burn amount\\n     */\\n    function minBurn() external view returns (uint256) {\\n        return _minBurn;\\n    }\\n\\n    /**\\n     * @dev execute multi-step arbitrage trade between exchanges using a flashloan from Bancor Network V3\\n     */\\n    function flashloanAndArb(\\n        Route[] calldata routes,\\n        Token token,\\n        uint256 sourceAmount\\n    ) external nonReentrant validRouteLength(routes) greaterThanZero(sourceAmount) {\\n        // verify that the last token in the process is the flashloan token\\n        if (routes[routes.length - 1].targetToken != token) {\\n            revert InvalidInitialAndFinalTokens();\\n        }\\n\\n        // take a flashloan for the source amount on Bancor v3 and perform the trades\\n        _bancorNetworkV3.flashLoan(\\n            token,\\n            sourceAmount,\\n            IFlashLoanRecipient(address(this)),\\n            abi.encode(routes, sourceAmount)\\n        );\\n\\n        // if flashloan token is not BNT, trade leftover tokens for BNT on Bancor Network V3\\n        if (!token.isEqual(_bnt)) {\\n            uint256 leftover = token.balanceOf(address(this));\\n            _trade(EXCHANGE_ID_BANCOR_V3, token, Token(address(_bnt)), leftover, 1, block.timestamp, address(0), 0, \\\"\\\");\\n        }\\n\\n        // allocate the rewards\\n        _allocateRewards(routes, token, sourceAmount, msg.sender);\\n    }\\n\\n    /**\\n     * @dev callback function for bancor V3 flashloan\\n     * @dev performs the arbitrage trades\\n     */\\n    function onFlashLoan(\\n        address caller,\\n        IERC20 erc20Token,\\n        uint256 amount,\\n        uint256 feeAmount,\\n        bytes memory data\\n    ) external {\\n        // validate inputs\\n        if (msg.sender != address(_bancorNetworkV3) || caller != address(this)) {\\n            revert InvalidFlashLoanCaller();\\n        }\\n\\n        // perform the arbitrage\\n        (Route[] memory routes, uint256 sourceAmount) = abi.decode(data, (Route[], uint256));\\n        _arbitrage(routes, Token(address(erc20Token)), sourceAmount);\\n\\n        // return the flashloan\\n        Token(address(erc20Token)).safeTransfer(msg.sender, amount + feeAmount);\\n    }\\n\\n    /**\\n     * @dev execute multi-step arbitrage trade between exchanges using user funds\\n     * @dev must approve token before executing the function\\n     */\\n    function fundAndArb(\\n        Route[] calldata routes,\\n        Token token,\\n        uint sourceAmount\\n    ) external payable nonReentrant validRouteLength(routes) greaterThanZero(sourceAmount) {\\n        // verify that the last token in the process is the arb token\\n        if (routes[routes.length - 1].targetToken != token) {\\n            revert InvalidInitialAndFinalTokens();\\n        }\\n        // validate token is tradeable on v3\\n        if (!token.isEqual(_bnt) && _bancorNetworkV3.collectionByPool(token) == address(0)) {\\n            revert InvalidSourceToken();\\n        }\\n        // validate ETH amount sent with function is correct\\n        if (token.isNative()) {\\n            if (msg.value != sourceAmount) {\\n                revert InvalidETHAmountSent();\\n            }\\n        } else {\\n            if (msg.value > 0) {\\n                revert InvalidETHAmountSent();\\n            }\\n        }\\n\\n        // transfer the tokens from user\\n        token.safeTransferFrom(msg.sender, address(this), sourceAmount);\\n\\n        // perform the arbitrage\\n        _arbitrage(routes, token, sourceAmount);\\n\\n        // return the tokens to the user\\n        token.safeTransfer(msg.sender, sourceAmount);\\n\\n        // if flashloan token is not BNT, trade leftover tokens for BNT on Bancor Network V3\\n        if (!token.isEqual(_bnt)) {\\n            uint leftover = token.balanceOf(address(this));\\n            _trade(EXCHANGE_ID_BANCOR_V3, token, Token(address(_bnt)), leftover, 1, block.timestamp, address(0), 0, \\\"\\\");\\n        }\\n\\n        // allocate the rewards\\n        _allocateRewards(routes, token, sourceAmount, msg.sender);\\n    }\\n\\n    /**\\n     * @dev arbitrage logic\\n     */\\n    function _arbitrage(Route[] memory routes, Token sourceToken, uint256 sourceAmount) private {\\n        // perform the trade routes\\n        for (uint256 i = 0; i < routes.length; i++) {\\n            // save the current balance\\n            uint256 previousBalance = routes[i].targetToken.balanceOf(address(this));\\n\\n            // perform the trade\\n            _trade(\\n                routes[i].exchangeId,\\n                sourceToken,\\n                routes[i].targetToken,\\n                sourceAmount,\\n                routes[i].minTargetAmount,\\n                routes[i].deadline,\\n                routes[i].customAddress,\\n                routes[i].customInt,\\n                routes[i].customData\\n            );\\n\\n            // the current iteration target token is the source token in the next iteration\\n            sourceToken = routes[i].targetToken;\\n\\n            // the resulting trade amount is the source amount in the next iteration\\n            sourceAmount = routes[i].targetToken.balanceOf(address(this)) - previousBalance;\\n        }\\n    }\\n\\n    /**\\n     * @dev handles the trade logic per route\\n     */\\n    function _trade(\\n        uint256 exchangeId,\\n        Token sourceToken,\\n        Token targetToken,\\n        uint256 sourceAmount,\\n        uint256 minTargetAmount,\\n        uint256 deadline,\\n        address customAddress,\\n        uint256 customInt,\\n        bytes memory customData\\n    ) private {\\n        if (exchangeId == EXCHANGE_ID_BANCOR_V2) {\\n            // allow the network to withdraw the source tokens\\n            _setExchangeAllowance(sourceToken, address(_bancorNetworkV2), sourceAmount);\\n\\n            // build the conversion path\\n            address[] memory path = new address[](3);\\n            path[0] = address(sourceToken);\\n            path[1] = customAddress; // pool token address\\n            path[2] = address(targetToken);\\n\\n            uint256 val = sourceToken.isNative() ? sourceAmount : 0;\\n\\n            // perform the trade\\n            _bancorNetworkV2.convertByPath{ value: val }(\\n                path,\\n                sourceAmount,\\n                minTargetAmount,\\n                address(0x0),\\n                address(0x0),\\n                0\\n            );\\n\\n            return;\\n        }\\n\\n        if (exchangeId == EXCHANGE_ID_BANCOR_V3) {\\n            // allow the network to withdraw the source tokens\\n            _setExchangeAllowance(sourceToken, address(_bancorNetworkV3), sourceAmount);\\n\\n            uint256 val = sourceToken.isNative() ? sourceAmount : 0;\\n\\n            // perform the trade\\n            _bancorNetworkV3.tradeBySourceAmountArb{ value: val }(\\n                sourceToken,\\n                targetToken,\\n                sourceAmount,\\n                minTargetAmount,\\n                deadline,\\n                address(0x0)\\n            );\\n\\n            return;\\n        }\\n\\n        if (exchangeId == EXCHANGE_ID_UNISWAP_V2 || exchangeId == EXCHANGE_ID_SUSHISWAP) {\\n            IUniswapV2Router02 router = exchangeId == EXCHANGE_ID_UNISWAP_V2 ? _uniswapV2Router : _sushiSwapRouter;\\n\\n            // allow the router to withdraw the source tokens\\n            _setExchangeAllowance(sourceToken, address(router), sourceAmount);\\n\\n            // build the path\\n            address[] memory path = new address[](2);\\n\\n            // perform the trade\\n            if (sourceToken.isNative()) {\\n                path[0] = address(_weth);\\n                path[1] = address(targetToken);\\n                router.swapExactETHForTokens{ value: sourceAmount }(minTargetAmount, path, address(this), deadline);\\n            } else if (targetToken.isNative()) {\\n                path[0] = address(sourceToken);\\n                path[1] = address(_weth);\\n                router.swapExactTokensForETH(sourceAmount, minTargetAmount, path, address(this), deadline);\\n            } else {\\n                path[0] = address(sourceToken);\\n                path[1] = address(targetToken);\\n                router.swapExactTokensForTokens(sourceAmount, minTargetAmount, path, address(this), deadline);\\n            }\\n\\n            return;\\n        }\\n\\n        if (exchangeId == EXCHANGE_ID_UNISWAP_V3) {\\n            address tokenIn = sourceToken.isNative() ? address(_weth) : address(sourceToken);\\n            address tokenOut = targetToken.isNative() ? address(_weth) : address(targetToken);\\n\\n            if (tokenIn == address(_weth)) {\\n                IWETH(address(_weth)).deposit{ value: sourceAmount }();\\n            }\\n\\n            // allow the router to withdraw the source tokens\\n            _setExchangeAllowance(Token(tokenIn), address(_uniswapV3Router), sourceAmount);\\n\\n            // build the params\\n            ISwapRouter.ExactInputSingleParams memory params = ISwapRouter.ExactInputSingleParams({\\n                tokenIn: tokenIn,\\n                tokenOut: tokenOut,\\n                fee: uint24(customInt), // fee\\n                recipient: address(this),\\n                deadline: deadline,\\n                amountIn: sourceAmount,\\n                amountOutMinimum: minTargetAmount,\\n                sqrtPriceLimitX96: uint160(0)\\n            });\\n\\n            // perform the trade\\n            _uniswapV3Router.exactInputSingle(params);\\n\\n            if (tokenOut == address(_weth)) {\\n                IWETH(address(_weth)).withdraw(_weth.balanceOf(address(this)));\\n            }\\n\\n            return;\\n        }\\n\\n        if (exchangeId == EXCHANGE_ID_CARBON) {\\n            // Carbon accepts 2^128 - 1 max for minTargetAmount\\n            if (minTargetAmount > type(uint128).max) {\\n                revert MinTargetAmountTooHigh();\\n            }\\n            // allow the carbon controller to withdraw the source tokens\\n            _setExchangeAllowance(sourceToken, address(_carbonController), sourceAmount);\\n\\n            uint256 val = sourceToken.isNative() ? sourceAmount : 0;\\n\\n            // decode the trade actions passed in as customData\\n            TradeAction[] memory tradeActions = abi.decode(customData, (TradeAction[]));\\n\\n            // perform the trade\\n            _carbonController.tradeBySourceAmount{ value: val }(\\n                sourceToken,\\n                targetToken,\\n                tradeActions,\\n                deadline,\\n                uint128(minTargetAmount)\\n            );\\n\\n            uint256 remainingSourceTokens = sourceToken.balanceOf(address(this));\\n            if (remainingSourceTokens > 0) {\\n                // transfer any remaining source tokens to a dust wallet\\n                sourceToken.safeTransfer(_dustWallet, remainingSourceTokens);\\n            }\\n\\n            return;\\n        }\\n\\n        revert InvalidExchangeId();\\n    }\\n\\n    /**\\n     * @dev allocates the rewards to the caller and burns the rest\\n     */\\n    function _allocateRewards(Route[] calldata routes, Token token, uint256 sourceAmount, address caller) internal {\\n        // get the total amount\\n        uint256 totalAmount = _bnt.balanceOf(address(this));\\n\\n        // calculate the rewards to send to the caller\\n        uint256 rewardAmount = MathEx.mulDivF(totalAmount, _rewards.percentagePPM, PPM_RESOLUTION);\\n\\n        // limit the rewards by the defined limit\\n        if (rewardAmount > _rewards.maxAmount) {\\n            rewardAmount = _rewards.maxAmount;\\n        }\\n\\n        // calculate the burn amount\\n        uint256 burnAmount = totalAmount - rewardAmount;\\n\\n        // check if min bnt burn amount is hit\\n        if (burnAmount < _minBurn) {\\n            revert InsufficientBurn();\\n        }\\n\\n        // burn the tokens\\n        if (burnAmount > 0) {\\n            _bnt.safeTransfer(address(_bnt), burnAmount);\\n        }\\n\\n        // transfer the rewards to the caller\\n        if (rewardAmount > 0) {\\n            _bnt.safeTransfer(caller, rewardAmount);\\n        }\\n\\n        // build the list of exchange ids\\n        uint16[] memory exchangeIds = new uint16[](routes.length);\\n        for (uint256 i = 0; i < routes.length; i++) {\\n            exchangeIds[i] = routes[i].exchangeId;\\n        }\\n\\n        // build the token path\\n        address[] memory path = new address[](routes.length + 1);\\n        path[0] = address(token);\\n        for (uint256 i = 0; i < routes.length; i++) {\\n            path[i + 1] = address(routes[i].targetToken);\\n        }\\n\\n        emit ArbitrageExecuted(caller, exchangeIds, path, sourceAmount, burnAmount, rewardAmount);\\n    }\\n\\n    /**\\n     * @dev set exchange allowance to the max amount if it's less than the input amount\\n     */\\n    function _setExchangeAllowance(Token token, address exchange, uint256 inputAmount) private {\\n        if (token.isNative()) {\\n            return;\\n        }\\n        uint256 allowance = token.toIERC20().allowance(address(this), exchange);\\n        if (allowance < inputAmount) {\\n            // increase allowance to the max amount if allowance < inputAmount\\n            token.safeIncreaseAllowance(exchange, type(uint256).max - allowance);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x50d3bacb472ac134035b99ed3d79979cf6e3d802b074b722df32c612a08b0710\",\"license\":\"MIT\"},\"contracts/exchanges/interfaces/IBancorNetwork.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { Token } from \\\"../../token/Token.sol\\\";\\n\\n/**\\n * @dev Flash-loan recipient interface\\n */\\ninterface IFlashLoanRecipient {\\n    /**\\n     * @dev a flash-loan recipient callback after each the caller must return the borrowed amount and an additional fee\\n     */\\n    function onFlashLoan(\\n        address caller,\\n        IERC20 erc20Token,\\n        uint256 amount,\\n        uint256 feeAmount,\\n        bytes memory data\\n    ) external;\\n}\\n\\n/**\\n * @dev Bancor Network interface\\n */\\ninterface IBancorNetwork {\\n    /**\\n     * @dev returns the respective pool collection for the provided pool\\n     */\\n    function collectionByPool(Token pool) external view returns (address);\\n\\n    /**\\n     * @dev performs a trade by providing the input source amount, sends the proceeds to the optional beneficiary (or\\n     * to the address of the caller, in case it's not supplied), and returns the trade target amount\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have approved the network to transfer the source tokens on its behalf (except for in the\\n     *   native token case)\\n     * - the caller must be the _bancorArbitrage contract\\n     */\\n    function tradeBySourceAmountArb(\\n        Token sourceToken,\\n        Token targetToken,\\n        uint256 sourceAmount,\\n        uint256 minReturnAmount,\\n        uint256 deadline,\\n        address beneficiary\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev performs a trade by providing the output target amount, sends the proceeds to the optional beneficiary (or\\n     * to the address of the caller, in case it's not supplied), and returns the trade source amount\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have approved the network to transfer the source tokens on its behalf (except for in the\\n     *   native token case)\\n     * - the caller must be the _bancorArbitrage contract\\n     */\\n    function tradeByTargetAmountArb(\\n        Token sourceToken,\\n        Token targetToken,\\n        uint256 targetAmount,\\n        uint256 maxSourceAmount,\\n        uint256 deadline,\\n        address beneficiary\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev provides a flash-loan\\n     *\\n     * requirements:\\n     *\\n     * - the recipient's callback must return *at least* the borrowed amount and fee back to the specified return address\\n     */\\n    function flashLoan(Token token, uint256 amount, IFlashLoanRecipient recipient, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xd32d5c468a840918518d3dc4f98cbb5d3b40f72f4b2c39599de48cce1b5178d7\",\"license\":\"MIT\"},\"contracts/exchanges/interfaces/IBancorNetworkV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { Token } from \\\"../../token/Token.sol\\\";\\n\\n/**\\n * Bancor Network V2 interface\\n */\\ninterface IBancorNetworkV2 {\\n    function convertByPath(\\n        address[] memory _path,\\n        uint256 _amount,\\n        uint256 _minReturn,\\n        address _beneficiary,\\n        address _affiliateAccount,\\n        uint256 _affiliateFee\\n    ) external payable returns (uint256);\\n\\n    function conversionPath(Token _sourceToken, Token _targetToken) external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0xeea0db2ca7d20eb2aa512dfbc279f07d6a85e3f0857d3d606e1ee8d542e8190c\",\"license\":\"MIT\"},\"contracts/exchanges/interfaces/ICarbonController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { Token } from \\\"../../token/Token.sol\\\";\\n\\nstruct TradeAction {\\n    uint256 strategyId;\\n    uint128 amount;\\n}\\n\\n/**\\n * Carbon controller interface\\n */\\ninterface ICarbonController {\\n    /**\\n     * @dev performs a trade by specifying a fixed source amount\\n     *\\n     * notes:\\n     *\\n     * - excess native token is returned to the sender if any\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have approved the source token\\n     */\\n    function tradeBySourceAmount(\\n        Token sourceToken,\\n        Token targetToken,\\n        TradeAction[] calldata tradeActions,\\n        uint256 deadline,\\n        uint128 minReturn\\n    ) external payable returns (uint128);\\n\\n    /**\\n     * @dev performs a trade by specifying a fixed target amount\\n     *\\n     * notes:\\n     *\\n     * - excess native token is returned to the sender if any\\n     *\\n     * requirements:\\n     *\\n     * - the caller must have approved the source token\\n     */\\n    function tradeByTargetAmount(\\n        Token sourceToken,\\n        Token targetToken,\\n        TradeAction[] calldata tradeActions,\\n        uint256 deadline,\\n        uint128 maxInput\\n    ) external payable returns (uint128);\\n}\\n\",\"keccak256\":\"0x1f1319ed83321acfe817ad5b31008fba6a6a43d38aedee71950ac2763c2a0413\",\"license\":\"MIT\"},\"contracts/token/SafeERC20Ex.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @dev extends the SafeERC20 library with additional operations\\n */\\nlibrary SafeERC20Ex {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev ensures that the spender has sufficient allowance\\n     */\\n    function ensureApprove(IERC20 token, address spender, uint256 amount) internal {\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        uint256 allowance = token.allowance(address(this), spender);\\n        if (allowance >= amount) {\\n            return;\\n        }\\n\\n        if (allowance > 0) {\\n            token.safeApprove(spender, 0);\\n        }\\n        token.safeApprove(spender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xf359286ea4cdcb214c72a7998db8519c26fd66b51fe0bfb1cb464d08942e8d39\",\"license\":\"MIT\"},\"contracts/token/Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev the main purpose of the Token interfaces is to ensure artificially that we won't use ERC20's standard functions,\\n * but only their safe versions, which are provided by SafeERC20 and SafeERC20Ex via the TokenLibrary contract\\n */\\ninterface Token {\\n\\n}\\n\",\"keccak256\":\"0xb1105bc1006129f541635da5c5b2a438c32a5009345cbc5770c9ff8786fd6d74\",\"license\":\"MIT\"},\"contracts/token/TokenLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IERC20Permit } from \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\n\\nimport { SafeERC20Ex } from \\\"./SafeERC20Ex.sol\\\";\\n\\nimport { Token } from \\\"./Token.sol\\\";\\n\\n/**\\n * @dev This library implements ERC20 and SafeERC20 utilities for both the native token and for ERC20 tokens\\n */\\nlibrary TokenLibrary {\\n    using SafeERC20 for IERC20;\\n    using SafeERC20Ex for IERC20;\\n\\n    error PermitUnsupported();\\n\\n    // the address that represents the native token reserve\\n    address private constant NATIVE_TOKEN_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    // the symbol that represents the native token\\n    string private constant NATIVE_TOKEN_SYMBOL = \\\"ETH\\\";\\n\\n    // the decimals for the native token\\n    uint8 private constant NATIVE_TOKEN_DECIMALS = 18;\\n\\n    // the token representing the native token\\n    Token public constant NATIVE_TOKEN = Token(NATIVE_TOKEN_ADDRESS);\\n\\n    /**\\n     * @dev returns whether the provided token represents an ERC20 or the native token reserve\\n     */\\n    function isNative(Token token) internal pure returns (bool) {\\n        return address(token) == NATIVE_TOKEN_ADDRESS;\\n    }\\n\\n    /**\\n     * @dev returns the symbol of the native token/ERC20 token\\n     */\\n    function symbol(Token token) internal view returns (string memory) {\\n        if (isNative(token)) {\\n            return NATIVE_TOKEN_SYMBOL;\\n        }\\n\\n        return toERC20(token).symbol();\\n    }\\n\\n    /**\\n     * @dev returns the decimals of the native token/ERC20 token\\n     */\\n    function decimals(Token token) internal view returns (uint8) {\\n        if (isNative(token)) {\\n            return NATIVE_TOKEN_DECIMALS;\\n        }\\n\\n        return toERC20(token).decimals();\\n    }\\n\\n    /**\\n     * @dev returns the balance of the native token/ERC20 token\\n     */\\n    function balanceOf(Token token, address account) internal view returns (uint256) {\\n        if (isNative(token)) {\\n            return account.balance;\\n        }\\n\\n        return toIERC20(token).balanceOf(account);\\n    }\\n\\n    /**\\n     * @dev transfers a specific amount of the native token/ERC20 token\\n     */\\n    function safeTransfer(Token token, address to, uint256 amount) internal {\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        if (isNative(token)) {\\n            payable(to).transfer(amount);\\n        } else {\\n            toIERC20(token).safeTransfer(to, amount);\\n        }\\n    }\\n\\n    /**\\n     * @dev transfers a specific amount of the native token/ERC20 token from a specific holder using the allowance mechanism\\n     *\\n     * note that the function does not perform any action if the native token is provided\\n     */\\n    function safeTransferFrom(Token token, address from, address to, uint256 amount) internal {\\n        if (amount == 0 || isNative(token)) {\\n            return;\\n        }\\n\\n        toIERC20(token).safeTransferFrom(from, to, amount);\\n    }\\n\\n    /**\\n     * @dev approves a specific amount of the native token/ERC20 token from a specific holder\\n     *\\n     * note that the function does not perform any action if the native token is provided\\n     */\\n    function safeApprove(Token token, address spender, uint256 amount) internal {\\n        if (isNative(token)) {\\n            return;\\n        }\\n\\n        toIERC20(token).safeApprove(spender, amount);\\n    }\\n\\n    /**\\n     * @dev increases allowance of the native token/ERC20 token from a specific holder\\n     *\\n     * note that the function does not perform any action if the native token is provided\\n     */\\n    function safeIncreaseAllowance(Token token, address spender, uint256 amount) internal {\\n        if (isNative(token)) {\\n            return;\\n        }\\n\\n        toIERC20(token).safeIncreaseAllowance(spender, amount);\\n    }\\n\\n    /**\\n     * @dev ensures that the spender has sufficient allowance\\n     *\\n     * note that the function does not perform any action if the native token is provided\\n     */\\n    function ensureApprove(Token token, address spender, uint256 amount) internal {\\n        if (isNative(token)) {\\n            return;\\n        }\\n\\n        toIERC20(token).ensureApprove(spender, amount);\\n    }\\n\\n    /**\\n     * @dev compares between a token and another raw ERC20 token\\n     */\\n    function isEqual(Token token, IERC20 erc20Token) internal pure returns (bool) {\\n        return toIERC20(token) == erc20Token;\\n    }\\n\\n    /**\\n     * @dev utility function that converts a token to an IERC20\\n     */\\n    function toIERC20(Token token) internal pure returns (IERC20) {\\n        return IERC20(address(token));\\n    }\\n\\n    /**\\n     * @dev utility function that converts a token to an ERC20\\n     */\\n    function toERC20(Token token) internal pure returns (ERC20) {\\n        return ERC20(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x292ce9f5186ffe2df5b12c7e8a72fed50419bf8ce0cfdfd0799040a2fb7e54af\",\"license\":\"MIT\"},\"contracts/utility/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nuint32 constant PPM_RESOLUTION = 1_000_000;\\n\",\"keccak256\":\"0x3f05ed118d79f5367e375d10e2ee91934b3506dd591bc7870c63c04a4436634a\",\"license\":\"MIT\"},\"contracts/utility/MathEx.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nuint256 constant ONE = 0x80000000000000000000000000000000;\\nuint256 constant LN2 = 0x58b90bfbe8e7bcd5e4f1d9cc01f97b57;\\n\\nstruct Uint512 {\\n    uint256 hi; // 256 most significant bits\\n    uint256 lo; // 256 least significant bits\\n}\\n\\nstruct Sint256 {\\n    uint256 value;\\n    bool isNeg;\\n}\\n\\n/**\\n * @dev this library provides a set of complex math operations\\n */\\nlibrary MathEx {\\n    error Overflow();\\n\\n    /**\\n     * @dev returns the largest integer smaller than or equal to `x * y / z`\\n     */\\n    function mulDivF(uint256 x, uint256 y, uint256 z) internal pure returns (uint256) {\\n        Uint512 memory xy = mul512(x, y);\\n\\n        // if `x * y < 2 ^ 256`\\n        if (xy.hi == 0) {\\n            return xy.lo / z;\\n        }\\n\\n        // assert `x * y / z < 2 ^ 256`\\n        if (xy.hi >= z) {\\n            revert Overflow();\\n        }\\n\\n        uint256 m = _mulMod(x, y, z); // `m = x * y % z`\\n        Uint512 memory n = _sub512(xy, m); // `n = x * y - m` hence `n / z = floor(x * y / z)`\\n\\n        // if `n < 2 ^ 256`\\n        if (n.hi == 0) {\\n            return n.lo / z;\\n        }\\n\\n        uint256 p = _unsafeSub(0, z) & z; // `p` is the largest power of 2 which `z` is divisible by\\n        uint256 q = _div512(n, p); // `n` is divisible by `p` because `n` is divisible by `z` and `z` is divisible by `p`\\n        uint256 r = _inv256(z / p); // `z / p = 1 mod 2` hence `inverse(z / p) = 1 mod 2 ^ 256`\\n        return _unsafeMul(q, r); // `q * r = (n / p) * inverse(z / p) = n / z`\\n    }\\n\\n    /**\\n     * @dev returns the maximum of `n1 - n2` and 0\\n     */\\n    function subMax0(uint256 n1, uint256 n2) internal pure returns (uint256) {\\n        return n1 > n2 ? n1 - n2 : 0;\\n    }\\n\\n    /**\\n     * @dev returns the value of `x > y`\\n     */\\n    function gt512(Uint512 memory x, Uint512 memory y) internal pure returns (bool) {\\n        return x.hi > y.hi || (x.hi == y.hi && x.lo > y.lo);\\n    }\\n\\n    /**\\n     * @dev returns the value of `x < y`\\n     */\\n    function lt512(Uint512 memory x, Uint512 memory y) internal pure returns (bool) {\\n        return x.hi < y.hi || (x.hi == y.hi && x.lo < y.lo);\\n    }\\n\\n    /**\\n     * @dev returns the value of `x >= y`\\n     */\\n    function gte512(Uint512 memory x, Uint512 memory y) internal pure returns (bool) {\\n        return !lt512(x, y);\\n    }\\n\\n    /**\\n     * @dev returns the value of `x <= y`\\n     */\\n    function lte512(Uint512 memory x, Uint512 memory y) internal pure returns (bool) {\\n        return !gt512(x, y);\\n    }\\n\\n    /**\\n     * @dev returns the value of `x * y`\\n     */\\n    function mul512(uint256 x, uint256 y) internal pure returns (Uint512 memory) {\\n        uint256 p = _mulModMax(x, y);\\n        uint256 q = _unsafeMul(x, y);\\n        if (p >= q) {\\n            return Uint512({ hi: p - q, lo: q });\\n        }\\n        return Uint512({ hi: _unsafeSub(p, q) - 1, lo: q });\\n    }\\n\\n    /**\\n     * @dev returns the value of `x - y`, given that `x >= y`\\n     */\\n    function _sub512(Uint512 memory x, uint256 y) private pure returns (Uint512 memory) {\\n        if (x.lo >= y) {\\n            return Uint512({ hi: x.hi, lo: x.lo - y });\\n        }\\n        return Uint512({ hi: x.hi - 1, lo: _unsafeSub(x.lo, y) });\\n    }\\n\\n    /**\\n     * @dev returns the value of `x / pow2n`, given that `x` is divisible by `pow2n`\\n     */\\n    function _div512(Uint512 memory x, uint256 pow2n) private pure returns (uint256) {\\n        uint256 pow2nInv = _unsafeAdd(_unsafeSub(0, pow2n) / pow2n, 1); // `1 << (256 - n)`\\n        return _unsafeMul(x.hi, pow2nInv) | (x.lo / pow2n); // `(x.hi << (256 - n)) | (x.lo >> n)`\\n    }\\n\\n    /**\\n     * @dev returns the inverse of `d` modulo `2 ^ 256`, given that `d` is congruent to `1` modulo `2`\\n     */\\n    function _inv256(uint256 d) private pure returns (uint256) {\\n        // approximate the root of `f(x) = 1 / x - d` using the newton\\u2013raphson convergence method\\n        uint256 x = 1;\\n        for (uint256 i = 0; i < 8; i++) {\\n            x = _unsafeMul(x, _unsafeSub(2, _unsafeMul(x, d))); // `x = x * (2 - x * d) mod 2 ^ 256`\\n        }\\n        return x;\\n    }\\n\\n    /**\\n     * @dev returns `(x + y) % 2 ^ 256`\\n     */\\n    function _unsafeAdd(uint256 x, uint256 y) private pure returns (uint256) {\\n        unchecked {\\n            return x + y;\\n        }\\n    }\\n\\n    /**\\n     * @dev returns `(x - y) % 2 ^ 256`\\n     */\\n    function _unsafeSub(uint256 x, uint256 y) private pure returns (uint256) {\\n        unchecked {\\n            return x - y;\\n        }\\n    }\\n\\n    /**\\n     * @dev returns `(x * y) % 2 ^ 256`\\n     */\\n    function _unsafeMul(uint256 x, uint256 y) private pure returns (uint256) {\\n        unchecked {\\n            return x * y;\\n        }\\n    }\\n\\n    /**\\n     * @dev returns `x * y % (2 ^ 256 - 1)`\\n     */\\n    function _mulModMax(uint256 x, uint256 y) private pure returns (uint256) {\\n        return mulmod(x, y, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev returns `x * y % z`\\n     */\\n    function _mulMod(uint256 x, uint256 y, uint256 z) private pure returns (uint256) {\\n        return mulmod(x, y, z);\\n    }\\n}\\n\",\"keccak256\":\"0x04847773d5c6dba677c5030987f96bfbe8baa4804caa3538893132f08b2cad8d\",\"license\":\"MIT\"},\"contracts/utility/Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport { AccessControlEnumerableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\n\\nimport { IUpgradeable } from \\\"./interfaces/IUpgradeable.sol\\\";\\n\\nimport { AccessDenied } from \\\"./Utils.sol\\\";\\n\\n/**\\n * @dev this contract provides common utilities for upgradeable contracts\\n *\\n * note that we're using the Transparent Upgradeable Proxy pattern and *not* the Universal Upgradeable Proxy Standard\\n * (UUPS) pattern, therefore initializing the implementation contracts is not necessary or required\\n */\\nabstract contract Upgradeable is IUpgradeable, AccessControlEnumerableUpgradeable {\\n    error AlreadyInitialized();\\n\\n    // the admin role is used to allow a non-proxy admin to perform additional initialization/setup during contract\\n    // upgrades\\n    bytes32 internal constant ROLE_ADMIN = keccak256(\\\"ROLE_ADMIN\\\");\\n\\n    uint32 internal constant MAX_GAP = 50;\\n\\n    uint16 internal _initializations;\\n\\n    // upgrade forward-compatibility storage gap\\n    uint256[MAX_GAP - 1] private __gap;\\n\\n    // solhint-disable func-name-mixedcase\\n\\n    /**\\n     * @dev initializes the contract and its parents\\n     */\\n    function __Upgradeable_init() internal onlyInitializing {\\n        __AccessControl_init();\\n\\n        __Upgradeable_init_unchained();\\n    }\\n\\n    /**\\n     * @dev performs contract-specific initialization\\n     */\\n    function __Upgradeable_init_unchained() internal onlyInitializing {\\n        _initializations = 1;\\n\\n        // set up administrative roles\\n        _setRoleAdmin(ROLE_ADMIN, ROLE_ADMIN);\\n\\n        // allow the deployer to initially be the admin of the contract\\n        _setupRole(ROLE_ADMIN, msg.sender);\\n    }\\n\\n    // solhint-enable func-name-mixedcase\\n\\n    modifier onlyAdmin() {\\n        _hasRole(ROLE_ADMIN, msg.sender);\\n\\n        _;\\n    }\\n\\n    modifier onlyRoleMember(bytes32 role) {\\n        _hasRole(role, msg.sender);\\n\\n        _;\\n    }\\n\\n    function version() public view virtual override returns (uint16);\\n\\n    /**\\n     * @dev returns the admin role\\n     */\\n    function roleAdmin() external pure returns (bytes32) {\\n        return ROLE_ADMIN;\\n    }\\n\\n    /**\\n     * @dev performs post-upgrade initialization\\n     *\\n     * requirements:\\n     *\\n     * - this must can be called only once per-upgrade\\n     */\\n    function postUpgrade(bytes calldata data) external {\\n        uint16 initializations = _initializations + 1;\\n\\n        if (initializations != version()) {\\n            revert AlreadyInitialized();\\n        }\\n\\n        _initializations = initializations;\\n\\n        _postUpgrade(data);\\n    }\\n\\n    /**\\n     * @dev an optional post-upgrade callback that can be implemented by child contracts\\n     */\\n    function _postUpgrade(bytes calldata /* data */) internal virtual {}\\n\\n    function _hasRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert AccessDenied();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x49dfeb8a1dce575e2cb3e657424d402bb48a83555cb63ee298e1651362846a9e\",\"license\":\"MIT\"},\"contracts/utility/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport { PPM_RESOLUTION } from \\\"./Constants.sol\\\";\\n\\nerror AccessDenied();\\nerror InvalidAddress();\\nerror InvalidFee();\\nerror ZeroValue();\\n\\n/**\\n * @dev common utilities\\n */\\nabstract contract Utils {\\n    // allows execution by the caller only\\n    modifier only(address caller) {\\n        _only(caller);\\n\\n        _;\\n    }\\n\\n    function _only(address caller) internal view {\\n        if (msg.sender != caller) {\\n            revert AccessDenied();\\n        }\\n    }\\n\\n    // verifies that a value is greater than zero\\n    modifier greaterThanZero(uint256 value) {\\n        _greaterThanZero(value);\\n\\n        _;\\n    }\\n\\n    // error message binary size optimization\\n    function _greaterThanZero(uint256 value) internal pure {\\n        if (value == 0) {\\n            revert ZeroValue();\\n        }\\n    }\\n\\n    // validates an address - currently only checks that it isn't null\\n    modifier validAddress(address addr) {\\n        _validAddress(addr);\\n\\n        _;\\n    }\\n\\n    // error message binary size optimization\\n    function _validAddress(address addr) internal pure {\\n        if (addr == address(0)) {\\n            revert InvalidAddress();\\n        }\\n    }\\n\\n    // ensures that the fee is valid\\n    modifier validFee(uint32 fee) {\\n        _validFee(fee);\\n\\n        _;\\n    }\\n\\n    // error message binary size optimization\\n    function _validFee(uint32 fee) internal pure {\\n        if (fee > PPM_RESOLUTION) {\\n            revert InvalidFee();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3899876085e761ee126d4adfa2a54203c31b9f7f5134a6f097ae92f33818937c\",\"license\":\"MIT\"},\"contracts/utility/interfaces/IUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport { IVersioned } from \\\"./IVersioned.sol\\\";\\n\\nimport { IAccessControlEnumerableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\\\";\\n\\n/**\\n * @dev this is the common interface for upgradeable contracts\\n */\\ninterface IUpgradeable is IAccessControlEnumerableUpgradeable, IVersioned {\\n\\n}\\n\",\"keccak256\":\"0xf1aad8c9cb426cc15e72dd7ae08bcbd38fd8a2cf93a2d6427699b8136ddd56bd\",\"license\":\"MIT\"},\"contracts/utility/interfaces/IVersioned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev an interface for a versioned contract\\n */\\ninterface IVersioned {\\n    function version() external view returns (uint16);\\n}\\n\",\"keccak256\":\"0x754cc1f231ab1962d5a76407169414111245345a50ee526254d2fc3e8e5b501d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101855760003560e01c80638cd2403d116100d1578063a217fddf1161008a578063c51f3cf711610064578063c51f3cf714610480578063ca15c87314610495578063d547741f146104b5578063e01113e8146104d557600080fd5b8063a217fddf14610442578063a47c9a2d14610457578063aeb2c8871461046d57600080fd5b80638cd2403d146103365780639010d07c1461035657806391d148541461038e57806393867fb5146103ae57806396bfaa9e146103cf5780639ec5a894146103ef57600080fd5b806336568abe1161013e57806355814b7c1161011857806355814b7c146102cc578063591421a6146102ec5780638129fc1c1461030c5780638aa9dfb81461032157600080fd5b806336568abe14610283578063380c6f70146102a357806354fd4d50146102b857600080fd5b806301ffc9a7146101915780630e2bf60c146101c65780630ef01204146101ee57806323e30c8b14610203578063248a9ca3146102255780632f2ff15d1461026357600080fd5b3661018c57005b600080fd5b34801561019d57600080fd5b506101b16101ac366004612f07565b6104ea565b60405190151581526020015b60405180910390f35b3480156101d257600080fd5b506101db600481565b60405161ffff90911681526020016101bd565b3480156101fa57600080fd5b506101db600381565b34801561020f57600080fd5b5061022361021e366004613063565b610515565b005b34801561023157600080fd5b506102556102403660046130d8565b60009081526097602052604090206001015490565b6040519081526020016101bd565b34801561026f57600080fd5b5061022361027e3660046130f1565b6105c2565b34801561028f57600080fd5b5061022361029e3660046130f1565b6105ec565b3480156102af57600080fd5b506101db600281565b3480156102c457600080fd5b5060036101db565b3480156102d857600080fd5b506102236102e7366004613121565b61066f565b3480156102f857600080fd5b506102236103073660046130d8565b610859565b34801561031857600080fd5b506102236108c4565b34801561032d57600080fd5b506101db600681565b34801561034257600080fd5b506102236103513660046131ac565b6109d4565b34801561036257600080fd5b5061037661037136600461321d565b610a25565b6040516001600160a01b0390911681526020016101bd565b34801561039a57600080fd5b506101b16103a93660046130f1565b610a44565b3480156103ba57600080fd5b50600080516020613d78833981519152610255565b3480156103db57600080fd5b506102236103ea36600461323f565b610a6f565b3480156103fb57600080fd5b5060408051808201825260008082526020918201528151808301835261012d5463ffffffff1680825261012e549183019182528351908152905191810191909152016101bd565b34801561044e57600080fd5b50610255600081565b34801561046357600080fd5b5061012f54610255565b61022361047b366004613121565b610b6d565b34801561048c57600080fd5b506101db600581565b3480156104a157600080fd5b506102556104b03660046130d8565b610db8565b3480156104c157600080fd5b506102236104d03660046130f1565b610dcf565b3480156104e157600080fd5b506101db600181565b60006001600160e01b03198216635a05180f60e01b148061050f575061050f82610df4565b92915050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614158061055657506001600160a01b0385163014155b156105745760405163e17c49b760e01b815260040160405180910390fd5b6000808280602001905181019061058b9190613309565b9150915061059a828783610e29565b6105b9336105a8868861345f565b6001600160a01b0389169190610fa9565b50505050505050565b6000828152609760205260409020600101546105dd8161100e565b6105e78383611018565b505050565b6001600160a01b03811633146106615760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b61066b828261103a565b5050565b61067761105c565b838361068382826110b5565b8261068d816110e0565b6001600160a01b03851687876106a4600182613472565b8181106106b3576106b3613485565b90506020028101906106c5919061349b565b6106d69060408101906020016134bb565b6001600160a01b0316146106fd5760405163fa48e42360e01b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663adf51de18686308b8b8a60405160200161074493929190613558565b6040516020818303038152906040526040518563ffffffff1660e01b8152600401610772949392919061367f565b600060405180830381600087803b15801561078c57600080fd5b505af11580156107a0573d6000803e3d6000fd5b5050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b039081169087161490505b61083a5760006107ef6001600160a01b03871630611101565b9050610838600261ffff16877f0000000000000000000000000000000000000000000000000000000000000000846001426000806040518060200160405280600081525061118f565b505b6108478787878733611d2f565b50505061085360018055565b50505050565b610871600080516020613d78833981519152336120b5565b61012f54818103610880575050565b61012f82905560408051828152602081018490527f2373b5a3fa63e4ff9f945c937101e165e9d132c2bb9d5d9f5eba11fc0f009932910160405180910390a1505b50565b600054610100900460ff16158080156108e45750600054600160ff909116105b806108fe5750303b1580156108fe575060005460ff166001145b6109615760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610658565b6000805460ff191660011790558015610984576000805461ff0019166101001790555b61098c6120dc565b80156108c1576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b60fb546000906109e99061ffff1660016136bc565b905061ffff8116600314610a0f5760405162dc149f60e41b815260040160405180910390fd5b60fb805461ffff191661ffff8316179055505050565b600082815260c960205260408120610a3d908361211d565b9392505050565b60009182526097602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610a87600080516020613d78833981519152336120b5565b610a9460208201826136e9565b610a9d81612129565b8160200135610aab816110e0565b61012d5461012e5463ffffffff90911690610ac960208601866136e9565b63ffffffff168263ffffffff16148015610ae65750846020013581145b15610af2575050505050565b8461012d610b008282613706565b507f707740459746824d259c9a0c2bfabcb04306f48ffc0c1c9c1404e990bf67d217905082610b3260208801886136e9565b6040805163ffffffff938416815292909116602083810191909152908201849052870135606082015260800160405180910390a15050505050565b610b7561105c565b8383610b8182826110b5565b82610b8b816110e0565b6001600160a01b0385168787610ba2600182613472565b818110610bb157610bb1613485565b9050602002810190610bc3919061349b565b610bd49060408101906020016134bb565b6001600160a01b031614610bfb5760405163fa48e42360e01b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811690861614158015610ccd57506040516309bca0e760e41b81526001600160a01b0386811660048301526000917f000000000000000000000000000000000000000000000000000000000000000090911690639bca0e7090602401602060405180830381865afa158015610c9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc29190613733565b6001600160a01b0316145b15610ceb57604051632889ee7560e01b815260040160405180910390fd5b610cfd856001600160a01b0316612153565b15610d2757833414610d2257604051631d3af0a760e21b815260040160405180910390fd5b610d46565b3415610d4657604051631d3af0a760e21b815260040160405180910390fd5b610d5b6001600160a01b038616333087612175565b610d6f610d688789613750565b8686610e29565b610d836001600160a01b0386163386610fa9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03908116908616146107d6565b600081815260c96020526040812061050f9061219f565b600082815260976020526040902060010154610dea8161100e565b6105e7838361103a565b60006001600160e01b03198216637965db0b60e01b148061050f57506301ffc9a760e01b6001600160e01b031983161461050f565b60005b8351811015610853576000610e7030868481518110610e4d57610e4d613485565b6020026020010151602001516001600160a01b031661110190919063ffffffff16565b9050610f52858381518110610e8757610e87613485565b60200260200101516000015161ffff1685878581518110610eaa57610eaa613485565b60200260200101516020015186898781518110610ec957610ec9613485565b6020026020010151604001518a8881518110610ee757610ee7613485565b6020026020010151606001518b8981518110610f0557610f05613485565b6020026020010151608001518c8a81518110610f2357610f23613485565b602002602001015160a001518d8b81518110610f4157610f41613485565b602002602001015160c0015161118f565b848281518110610f6457610f64613485565b602002602001015160200151935080610f8930878581518110610e4d57610e4d613485565b610f939190613472565b9250508080610fa190613848565b915050610e2c565b80600003610fb657505050565b610fbf83612153565b15610ffa576040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015610853573d6000803e3d6000fd5b6105e76001600160a01b03841683836121a9565b6108c1813361220c565b6110228282612265565b600082815260c9602052604090206105e790826122eb565b6110448282612300565b600082815260c9602052604090206105e79082612367565b6002600154036110ae5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610658565b6002600155565b8015806110c25750600a81115b1561066b57604051633b4c3e8760e11b815260040160405180910390fd5b806000036108c157604051637c946ed760e01b815260040160405180910390fd5b600061110c83612153565b1561112257506001600160a01b0381163161050f565b826040516370a0823160e01b81526001600160a01b03848116600483015291909116906370a0823190602401602060405180830381865afa15801561116b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3d9190613861565b6000198901611339576111c3887f00000000000000000000000000000000000000000000000000000000000000008861237c565b604080516003808252608082019092526000916020820160608036833701905050905088816000815181106111fa576111fa613485565b60200260200101906001600160a01b031690816001600160a01b031681525050838160018151811061122e5761122e613485565b60200260200101906001600160a01b031690816001600160a01b031681525050878160028151811061126257611262613485565b6001600160a01b039283166020918202929092010152600090611286908b16612153565b611291576000611293565b875b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b77d239b82848b8b60008060006040518863ffffffff1660e01b81526004016112ee969594939291906138be565b60206040518083038185885af115801561130c573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906113319190613861565b505050611d24565b600119890161144c5761136d887f00000000000000000000000000000000000000000000000000000000000000008861237c565b6000611381896001600160a01b0316612153565b61138c57600061138e565b865b604051636c4aff7760e11b81526001600160a01b038b811660048301528a81166024830152604482018a90526064820189905260848201889052600060a48301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063d895feee90839060c40160206040518083038185885af1158015611420573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906114459190613861565b5050611d24565b600389148061145b5750600589145b156117ca57600060038a14611490577f00000000000000000000000000000000000000000000000000000000000000006114b2565b7f00000000000000000000000000000000000000000000000000000000000000005b90506114bf89828961237c565b6040805160028082526060820183526000926020830190803683370190505090506114f28a6001600160a01b0316612153565b156115ef577f00000000000000000000000000000000000000000000000000000000000000008160008151811061152b5761152b613485565b60200260200101906001600160a01b031690816001600160a01b031681525050888160018151811061155f5761155f613485565b6001600160a01b039283166020918202929092010152604051637ff36ab560e01b815290831690637ff36ab5908a906115a2908b90869030908d90600401613904565b60006040518083038185885af11580156115c0573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f191682016040526115e99190810190613939565b50611445565b611601896001600160a01b0316612153565b156116f857898160008151811061161a5761161a613485565b60200260200101906001600160a01b031690816001600160a01b0316815250507f00000000000000000000000000000000000000000000000000000000000000008160018151811061166e5761166e613485565b6001600160a01b0392831660209182029290920101526040516318cbafe560e01b8152908316906318cbafe5906116b1908b908b90869030908d906004016139be565b6000604051808303816000875af11580156116d0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115e99190810190613939565b898160008151811061170c5761170c613485565b60200260200101906001600160a01b031690816001600160a01b031681525050888160018151811061174057611740613485565b6001600160a01b0392831660209182029290920101526040516338ed173960e01b8152908316906338ed173990611783908b908b90869030908d906004016139be565b6000604051808303816000875af11580156117a2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113319190810190613939565b6003198901611b8a5760006117e7896001600160a01b0316612153565b6117f15788611813565b7f00000000000000000000000000000000000000000000000000000000000000005b90506000611829896001600160a01b0316612153565b6118335788611855565b7f00000000000000000000000000000000000000000000000000000000000000005b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031603611905577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0896040518263ffffffff1660e01b81526004016000604051808303818588803b1580156118eb57600080fd5b505af11580156118ff573d6000803e3d6000fd5b50505050505b611930827f00000000000000000000000000000000000000000000000000000000000000008a61237c565b60408051610100810182526001600160a01b038085168252838116602083015262ffffff8716828401523060608301526080820189905260a082018b905260c082018a9052600060e0830152915163414bf38960e01b815290917f0000000000000000000000000000000000000000000000000000000000000000169063414bf38990611a2590849060040181516001600160a01b03908116825260208084015182169083015260408084015162ffffff16908301526060808401518216908301526080808401519083015260a0838101519083015260c0808401519083015260e09283015116918101919091526101000190565b6020604051808303816000875af1158015611a44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a689190613861565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031603611331576040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d9082906370a0823190602401602060405180830381865afa158015611b0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b329190613861565b6040518263ffffffff1660e01b8152600401611b5091815260200190565b600060405180830381600087803b158015611b6a57600080fd5b505af1158015611b7e573d6000803e3d6000fd5b50505050505050611d24565b6005198901611d0b576001600160801b03851115611bbb57604051637d5ee39160e01b815260040160405180910390fd5b611be6887f00000000000000000000000000000000000000000000000000000000000000008861237c565b6000611bfa896001600160a01b0316612153565b611c05576000611c07565b865b9050600082806020019051810190611c1f9190613a11565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f1c5e014838c8c858b8d6040518763ffffffff1660e01b8152600401611c76959493929190613ac3565b60206040518083038185885af1158015611c94573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611cb99190613b4c565b506000611ccf6001600160a01b038c1630611101565b90508015611331576113316001600160a01b038c167f000000000000000000000000000000000000000000000000000000000000000083610fa9565b60405163c90c106360e01b815260040160405180910390fd5b505050505050505050565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611d96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dba9190613861565b61012d54909150600090611dd990839063ffffffff16620f4240612441565b61012e54909150811115611ded575061012e545b6000611df98284613472565b905061012f54811015611e1f57604051630b1b8c1160e31b815260040160405180910390fd5b8015611e5a57611e5a7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03811690836121a9565b8115611e9457611e946001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001685846121a9565b6000876001600160401b03811115611eae57611eae612f56565b604051908082528060200260200182016040528015611ed7578160200160208202803683370190505b50905060005b88811015611f4e57898982818110611ef757611ef7613485565b9050602002810190611f09919061349b565b611f17906020810190613b67565b828281518110611f2957611f29613485565b61ffff9092166020928302919091019091015280611f4681613848565b915050611edd565b506000611f5c89600161345f565b6001600160401b03811115611f7357611f73612f56565b604051908082528060200260200182016040528015611f9c578160200160208202803683370190505b5090508781600081518110611fb357611fb3613485565b60200260200101906001600160a01b031690816001600160a01b03168152505060005b89811015612059578a8a82818110611ff057611ff0613485565b9050602002810190612002919061349b565b6120139060408101906020016134bb565b8261201f83600161345f565b8151811061202f5761202f613485565b6001600160a01b03909216602092830291909101909101528061205181613848565b915050611fd6565b50856001600160a01b03167fff8eb78730569e0ec598efa1a9e2263591cdaa6ad3d6c980a57a60aeee31691883838a878960405161209b959493929190613b84565b60405180910390a250505050505050505050565b60018055565b6120bf8282610a44565b61066b57604051634ca8886760e01b815260040160405180910390fd5b600054610100900460ff166121035760405162461bcd60e51b815260040161065890613bf4565b61210b61250d565b61211361253c565b61211b612573565b565b6000610a3d83836125d4565b620f424063ffffffff821611156108c1576040516358d620b360e01b815260040160405180910390fd5b6001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1490565b801580612186575061218684612153565b610853576108536001600160a01b0385168484846125fe565b600061050f825490565b6040516001600160a01b0383166024820152604481018290526105e790849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612636565b6122168282610a44565b61066b5761222381612708565b61222e83602061271a565b60405160200161223f929190613c3f565b60408051601f198184030181529082905262461bcd60e51b825261065891600401613cb4565b61226f8282610a44565b61066b5760008281526097602090815260408083206001600160a01b03851684529091529020805460ff191660011790556122a73390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610a3d836001600160a01b0384166128b5565b61230a8282610a44565b1561066b5760008281526097602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610a3d836001600160a01b038416612904565b61238e836001600160a01b0316612153565b1561239857505050565b60006001600160a01b038416604051636eb1769f60e11b81523060048201526001600160a01b038581166024830152919091169063dd62ed3e90604401602060405180830381865afa1580156123f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124169190613861565b905081811015610853576108538361243083600019613472565b6001600160a01b03871691906129fe565b60008061244e8585612a25565b80519091506000036124725782816020015161246a9190613cdd565b915050610a3d565b8051831161249357604051631a93c68960e11b815260040160405180910390fd5b60006124a0868686612aac565b905060006124ae8383612ac7565b80519091506000036124d4578481602001516124ca9190613cdd565b9350505050610a3d565b60008581038616906124e68383612b4c565b905060006124fc6124f7848a613cdd565b612b83565b919091029998505050505050505050565b600054610100900460ff166125345760405162461bcd60e51b815260040161065890613bf4565b61211b612bae565b600054610100900460ff166125635760405162461bcd60e51b815260040161065890613bf4565b61256b612bd5565b61211b612bfc565b600054610100900460ff1661259a5760405162461bcd60e51b815260040161065890613bf4565b60408051808201909152620186a080825268056bc75e2d63100000602090920182905261012d805463ffffffff1916909117905561012e55565b60008260000182815481106125eb576125eb613485565b9060005260206000200154905092915050565b6040516001600160a01b03808516602483015283166044820152606481018290526108539085906323b872dd60e01b906084016121d5565b600061268b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612c619092919063ffffffff16565b8051909150156105e757808060200190518101906126a99190613cff565b6105e75760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610658565b606061050f6001600160a01b03831660145b60606000612729836002613d21565b61273490600261345f565b6001600160401b0381111561274b5761274b612f56565b6040519080825280601f01601f191660200182016040528015612775576020820181803683370190505b509050600360fc1b8160008151811061279057612790613485565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106127bf576127bf613485565b60200101906001600160f81b031916908160001a90535060006127e3846002613d21565b6127ee90600161345f565b90505b6001811115612866576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061282257612822613485565b1a60f81b82828151811061283857612838613485565b60200101906001600160f81b031916908160001a90535060049490941c9361285f81613d38565b90506127f1565b508315610a3d5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610658565b60008181526001830160205260408120546128fc5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561050f565b50600061050f565b600081815260018301602052604081205480156129ed576000612928600183613472565b855490915060009061293c90600190613472565b90508181146129a157600086600001828154811061295c5761295c613485565b906000526020600020015490508087600001848154811061297f5761297f613485565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806129b2576129b2613d4f565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061050f565b600091505061050f565b5092915050565b612a0783612153565b15612a1157505050565b6105e76001600160a01b0384168383612c78565b60408051808201909152600080825260208201526000612a458484612d2a565b9050838302808210612a7a5760405180604001604052808284612a689190613472565b8152602001828152509250505061050f565b60405180604001604052806001612a918585900390565b612a9b9190613472565b815260200191909152949350505050565b60008180612abc57612abc613cc7565b838509949350505050565b604080518082019091526000808252602082015281836020015110612b1457604051806040016040528084600001518152602001838560200151612b0b9190613472565b9052905061050f565b604051806040016040528060018560000151612b309190613472565b8152602001612b43856020015185900390565b90529392505050565b600080612b64612b5e84808403613cdd565b60010190565b9050828460200151612b769190613cdd565b8451820217949350505050565b60006001815b60088110156129f7578382026002038202915080612ba681613848565b915050612b89565b600054610100900460ff166120af5760405162461bcd60e51b815260040161065890613bf4565b600054610100900460ff1661211b5760405162461bcd60e51b815260040161065890613bf4565b600054610100900460ff16612c235760405162461bcd60e51b815260040161065890613bf4565b60fb805461ffff19166001179055612c49600080516020613d7883398151915280612d39565b61211b600080516020613d7883398151915233612d84565b6060612c708484600085612d8e565b949350505050565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015612cc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ced9190613861565b612cf7919061345f565b6040516001600160a01b03851660248201526044810182905290915061085390859063095ea7b360e01b906064016121d5565b60006000198284099392505050565b600082815260976020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b61066b8282611018565b606082471015612def5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610658565b600080866001600160a01b03168587604051612e0b9190613d65565b60006040518083038185875af1925050503d8060008114612e48576040519150601f19603f3d011682016040523d82523d6000602084013e612e4d565b606091505b5091509150612e5e87838387612e69565b979650505050505050565b60608315612ed8578251600003612ed1576001600160a01b0385163b612ed15760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610658565b5081612c70565b612c708383815115612eed5781518083602001fd5b8060405162461bcd60e51b81526004016106589190613cb4565b600060208284031215612f1957600080fd5b81356001600160e01b031981168114610a3d57600080fd5b6001600160a01b03811681146108c157600080fd5b8035612f5181612f31565b919050565b634e487b7160e01b600052604160045260246000fd5b60405160e081016001600160401b0381118282101715612f8e57612f8e612f56565b60405290565b604080519081016001600160401b0381118282101715612f8e57612f8e612f56565b604051601f8201601f191681016001600160401b0381118282101715612fde57612fde612f56565b604052919050565b60006001600160401b03821115612fff57612fff612f56565b50601f01601f191660200190565b600082601f83011261301e57600080fd5b813561303161302c82612fe6565b612fb6565b81815284602083860101111561304657600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561307b57600080fd5b853561308681612f31565b9450602086013561309681612f31565b9350604086013592506060860135915060808601356001600160401b038111156130bf57600080fd5b6130cb8882890161300d565b9150509295509295909350565b6000602082840312156130ea57600080fd5b5035919050565b6000806040838503121561310457600080fd5b82359150602083013561311681612f31565b809150509250929050565b6000806000806060858703121561313757600080fd5b84356001600160401b038082111561314e57600080fd5b818701915087601f83011261316257600080fd5b81358181111561317157600080fd5b8860208260051b850101111561318657600080fd5b6020928301965094505085013561319c81612f31565b9396929550929360400135925050565b600080602083850312156131bf57600080fd5b82356001600160401b03808211156131d657600080fd5b818501915085601f8301126131ea57600080fd5b8135818111156131f957600080fd5b86602082850101111561320b57600080fd5b60209290920196919550909350505050565b6000806040838503121561323057600080fd5b50508035926020909101359150565b60006040828403121561325157600080fd5b50919050565b60006001600160401b0382111561327057613270612f56565b5060051b60200190565b61ffff811681146108c157600080fd5b8051612f518161327a565b8051612f5181612f31565b60005b838110156132bb5781810151838201526020016132a3565b50506000910152565b600082601f8301126132d557600080fd5b81516132e361302c82612fe6565b8181528460208386010111156132f857600080fd5b612c708260208301602087016132a0565b6000806040838503121561331c57600080fd5b82516001600160401b038082111561333357600080fd5b818501915085601f83011261334757600080fd5b8151602061335761302c83613257565b82815260059290921b8401810191818101908984111561337657600080fd5b8286015b848110156134365780518681111561339157600080fd5b870160e0818d03601f190112156133a85760008081fd5b6133b0612f6c565b6133bb86830161328a565b81526133c960408301613295565b8682015260608083015160408301526080808401518284015260a091506133f1828501613295565b818401525060c0808401518284015260e08401519150898211156134155760008081fd5b6134238f89848701016132c4565b908301525084525091830191830161337a565b5097909101519698969750505050505050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561050f5761050f613449565b8181038181111561050f5761050f613449565b634e487b7160e01b600052603260045260246000fd5b6000823560de198336030181126134b157600080fd5b9190910192915050565b6000602082840312156134cd57600080fd5b8135610a3d81612f31565b8035612f518161327a565b6000808335601e198436030181126134fa57600080fd5b83016020810192503590506001600160401b0381111561351957600080fd5b80360382131561352857600080fd5b9250929050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60408082528181018490526000906060808401600587901b850182018885805b8a81101561363b57888403605f190185528235368d900360de1901811261359d578283fd5b8c0160e081356135ac8161327a565b61ffff1686526020828101356135c181612f31565b6001600160a01b031687820152828a01358a880152888301358988015260806135eb818501612f46565b6001600160a01b03169088015260a0838101359088015260c0613610818501856134e3565b945083828a0152613624848a01868361352f565b998301999850505094909401935050600101613578565b50505080945050505050826020830152949350505050565b6000815180845261366b8160208601602086016132a0565b601f01601f19169290920160200192915050565b6001600160a01b03858116825260208201859052831660408201526080606082018190526000906136b290830184613653565b9695505050505050565b61ffff8181168382160190808211156129f7576129f7613449565b63ffffffff811681146108c157600080fd5b6000602082840312156136fb57600080fd5b8135610a3d816136d7565b8135613711816136d7565b63ffffffff811663ffffffff1983541617825550602082013560018201555050565b60006020828403121561374557600080fd5b8151610a3d81612f31565b600061375e61302c84613257565b80848252602080830192508560051b85013681111561377c57600080fd5b855b8181101561383c5780356001600160401b038082111561379e5760008081fd5b818901915060e082360312156137b45760008081fd5b6137bc612f6c565b6137c5836134d8565b81526137d2868401612f46565b81870152604083810135908201526060808401359082015260806137f7818501612f46565b9082015260a0838101359082015260c080840135838111156138195760008081fd5b6138253682870161300d565b91830191909152508752505093820193820161377e565b50919695505050505050565b60006001820161385a5761385a613449565b5060010190565b60006020828403121561387357600080fd5b5051919050565b600081518084526020808501945080840160005b838110156138b35781516001600160a01b03168752958201959082019060010161388e565b509495945050505050565b60c0815260006138d160c083018961387a565b60208301979097525060408101949094526001600160a01b0392831660608501529116608083015260a090910152919050565b84815260806020820152600061391d608083018661387a565b6001600160a01b03949094166040830152506060015292915050565b6000602080838503121561394c57600080fd5b82516001600160401b0381111561396257600080fd5b8301601f8101851361397357600080fd5b805161398161302c82613257565b81815260059190911b820183019083810190878311156139a057600080fd5b928401925b82841015612e5e578351825292840192908401906139a5565b85815284602082015260a0604082015260006139dd60a083018661387a565b6001600160a01b0394909416606083015250608001529392505050565b80516001600160801b0381168114612f5157600080fd5b60006020808385031215613a2457600080fd5b82516001600160401b03811115613a3a57600080fd5b8301601f81018513613a4b57600080fd5b8051613a5961302c82613257565b81815260069190911b82018301908381019087831115613a7857600080fd5b928401925b82841015612e5e5760408489031215613a965760008081fd5b613a9e612f94565b84518152613aad8686016139fa565b8187015282526040939093019290840190613a7d565b6001600160a01b038681168252851660208083019190915260a0604080840182905286519184018290526000928781019260c0860190855b81811015613b29578551805184528401516001600160801b0316848401529483019491840191600101613afb565b5050606086018890526001600160801b038716608087015293506136b292505050565b600060208284031215613b5e57600080fd5b610a3d826139fa565b600060208284031215613b7957600080fd5b8135610a3d8161327a565b60a0808252865190820181905260009060209060c0840190828a01845b82811015613bc157815161ffff1684529284019290840190600101613ba1565b50505083810382850152613bd5818961387a565b6040850197909752505050606081019290925260809091015292915050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613c778160178501602088016132a0565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351613ca88160288401602088016132a0565b01602801949350505050565b602081526000610a3d6020830184613653565b634e487b7160e01b600052601260045260246000fd5b600082613cfa57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215613d1157600080fd5b81518015158114610a3d57600080fd5b808202811582820484141761050f5761050f613449565b600081613d4757613d47613449565b506000190190565b634e487b7160e01b600052603160045260246000fd5b600082516134b18184602087016132a056fe2172861495e7b85edac73e3cd5fbb42dd675baadf627720e687bcfdaca025096a164736f6c6343000813000a",
  "devdoc": {
    "details": "BancorArbitrage contract",
    "events": {
      "ArbitrageExecuted(address,uint16[],address[],uint256,uint256,uint256)": {
        "details": "triggered after a successful arb is executed"
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "MinBurnUpdated(uint256,uint256)": {
        "details": "triggered when the min bnt burn amount is updated"
      },
      "RewardsUpdated(uint32,uint32,uint256,uint256)": {
        "details": "triggered when the rewards settings are updated"
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "a \"virtual\" constructor that is only used to set immutable state variables"
      },
      "flashloanAndArb((uint16,address,uint256,uint256,address,uint256,bytes)[],address,uint256)": {
        "details": "execute multi-step arbitrage trade between exchanges using a flashloan from Bancor Network V3"
      },
      "fundAndArb((uint16,address,uint256,uint256,address,uint256,bytes)[],address,uint256)": {
        "details": "execute multi-step arbitrage trade between exchanges using user fundsmust approve token before executing the function"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize()": {
        "details": "fully initializes the contract and its parents"
      },
      "minBurn()": {
        "details": "returns the min bnt burn amount"
      },
      "onFlashLoan(address,address,uint256,uint256,bytes)": {
        "details": "callback function for bancor V3 flashloanperforms the arbitrage trades"
      },
      "postUpgrade(bytes)": {
        "details": "performs post-upgrade initialization requirements: - this must can be called only once per-upgrade"
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "rewards()": {
        "details": "returns the rewards settings"
      },
      "roleAdmin()": {
        "details": "returns the admin role"
      },
      "setMinBurn(uint256)": {
        "details": "set min bnt burn amount requirements: - the caller must be the admin of the contract"
      },
      "setRewards((uint32,uint256))": {
        "details": "sets the rewards settings requirements: - the caller must be the admin of the contract"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 626,
        "contract": "contracts/arbitrage/BancorArbitrage.sol:BancorArbitrage",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 629,
        "contract": "contracts/arbitrage/BancorArbitrage.sol:BancorArbitrage",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 802,
        "contract": "contracts/arbitrage/BancorArbitrage.sol:BancorArbitrage",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 860,
        "contract": "contracts/arbitrage/BancorArbitrage.sol:BancorArbitrage",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1186,
        "contract": "contracts/arbitrage/BancorArbitrage.sol:BancorArbitrage",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1405,
        "contract": "contracts/arbitrage/BancorArbitrage.sol:BancorArbitrage",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 225,
        "contract": "contracts/arbitrage/BancorArbitrage.sol:BancorArbitrage",
        "label": "_roles",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)220_storage)"
      },
      {
        "astId": 520,
        "contract": "contracts/arbitrage/BancorArbitrage.sol:BancorArbitrage",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 74,
        "contract": "contracts/arbitrage/BancorArbitrage.sol:BancorArbitrage",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)2609_storage)"
      },
      {
        "astId": 184,
        "contract": "contracts/arbitrage/BancorArbitrage.sol:BancorArbitrage",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11660,
        "contract": "contracts/arbitrage/BancorArbitrage.sol:BancorArbitrage",
        "label": "_initializations",
        "offset": 0,
        "slot": "251",
        "type": "t_uint16"
      },
      {
        "astId": 11666,
        "contract": "contracts/arbitrage/BancorArbitrage.sol:BancorArbitrage",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7814,
        "contract": "contracts/arbitrage/BancorArbitrage.sol:BancorArbitrage",
        "label": "_rewards",
        "offset": 0,
        "slot": "301",
        "type": "t_struct(Rewards)7745_storage"
      },
      {
        "astId": 7816,
        "contract": "contracts/arbitrage/BancorArbitrage.sol:BancorArbitrage",
        "label": "_minBurn",
        "offset": 0,
        "slot": "303",
        "type": "t_uint256"
      },
      {
        "astId": 7822,
        "contract": "contracts/arbitrage/BancorArbitrage.sol:BancorArbitrage",
        "label": "__gap",
        "offset": 0,
        "slot": "304",
        "type": "t_array(t_uint256)47_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)47_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[47]",
        "numberOfBytes": "1504"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)2609_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)2609_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)220_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)220_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)2609_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 2608,
            "contract": "contracts/arbitrage/BancorArbitrage.sol:BancorArbitrage",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2294_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Rewards)7745_storage": {
        "encoding": "inplace",
        "label": "struct BancorArbitrage.Rewards",
        "members": [
          {
            "astId": 7742,
            "contract": "contracts/arbitrage/BancorArbitrage.sol:BancorArbitrage",
            "label": "percentagePPM",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 7744,
            "contract": "contracts/arbitrage/BancorArbitrage.sol:BancorArbitrage",
            "label": "maxAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)220_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 217,
            "contract": "contracts/arbitrage/BancorArbitrage.sol:BancorArbitrage",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 219,
            "contract": "contracts/arbitrage/BancorArbitrage.sol:BancorArbitrage",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2294_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 2289,
            "contract": "contracts/arbitrage/BancorArbitrage.sol:BancorArbitrage",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2293,
            "contract": "contracts/arbitrage/BancorArbitrage.sol:BancorArbitrage",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}